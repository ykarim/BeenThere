{"ast":null,"code":"//------------------------------------------------------------------------------\n// Copyright Jonathan Kaufman Corp. 2015\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//------------------------------------------------------------------------------\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        desc = parent = undefined;\n        continue _function;\n      }\n    } else if ('value' in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _ReactBubbleChartD3 = require('./ReactBubbleChartD3');\n\nvar _ReactBubbleChartD32 = _interopRequireDefault(_ReactBubbleChartD3);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom); // Description of props!\n// data format:\n// An array of data objects (defined below) used to populate the bubble chart.\n// {\n//    _id: string,        // unique id (required)\n//    value: number,      // used to determine relative size of bubbles (required)\n//    displayText: string,// will use _id if undefined\n//    colorValue: number, // used to determine color\n//    selected: boolean,  // if true will use selectedColor/selectedTextColor for circle/text\n// }\n//\n// Can also be a nested JSON object if you want a nested bubble chart. That would look like:\n// {\n//   _id: string,\n//   children: [\n//     {data object},\n//     {data object},\n//     {\n//       _id: string,\n//       children: [...]\n//     }\n//   ]\n// legend (optional)\n// boolean. if true, create and show a legend based on the passed on colors\n// colorLegend (optional)\n// an array of:\n// string || {\n//   color: string,\n//   text: string used in legend,\n//   textColor: string (optional) - if specified will use this for the text color when\n//              over bubbles with that color\n// }\n// If this is left undefined everything will render black. But fear not! we add\n// the css class `bubble` to all... bubbles and `bubble leaf` if it has no\n// children. This way if you want all bubbles to be styled the same way you can do\n// so with just css instead of defining a color legend array.\n// fixedDomain (optional)\n// Used in tandum with the color legend. If defined, the minimum number corresponds\n// to the minimum value in the color legend array, and the maximum corresponds to\n// the max. The rest of the `colorValue` values will use a quantized domain to find\n// their spot.\n// If this is undefined we will use the min and max of the `colorValue`s of the\n// dataset.\n// {\n//   min: number,\n//   max: number\n// }\n// tooltip (optional)\n// If `true`, will create a `<div>` as a sibling of the main `<svg>` chart, whose\n// content will be populated by highlighting over one of the bubbles. The class of\n// this element is `tooltip`. For now all of the styling is handled by this module,\n// not by CSS.\n// tooltipProps (optional)\n// This is where you configure what is populated (and from where) in the tooltip.\n// This is an array of objects or strings. The objects take three properties -\n// `css`, `prop`, and `display` (optional). If you use a string instead of an\n// object, that strings values will be used for all three.\n// For each object in this array, we create a `<div>` whose class is specified by\n// `css`. `prop` specifies what property of the data object to display in the\n// tooltip. `display` (if specified) will prepend the string with `Value: `, if\n// unspecified, nothing is prepended.\n// tooltipFunc (optional)\n// A function that is passed the domNode, the d3 data object, and the color of the\n// tooltip on hover. Can be used if you want to do fancier dom stuff than just set\n// some text values.\n// selectedColor\n// String hex value.\n// If defined, will use this to color the circle corresponding to the data object\n// whose `selected` property is true.\n// selectedTextColor\n// String hex value.\n// If defined, will use this to color the text corresponding to the data object\n// whose `selected` property is true.\n// onClick\n// Can pass a function that will be called with the data object when that bubble is\n// clicked on.\n// smallDiameter\n// Can pass a number below which the label div will have the `small` class added.\n// defaults to 40\n// mediumDiameter\n// Can pass a number below which the label div will have the `medium` class added,\n// and above which the `large` class will be added. Defaults to 115.\n// legendSpacing\n// The number of pixels between blocks in the legend\n// fontSizeFactor\n// A multiplier used to determine a bubble's font-size as a function of its radius.\n// If not specified, the font-sizes depend on CSS styles for large, medium, and small classes, or 1em by default.\n// duration\n// Determines the length of time (in milliseconds) it takes for each bubble's transition animation to complete.\n// defaults to 500 ms; can set to zero\n// delay\n// Staggers the transition between each bubble element.\n// defaults to 7 ms\n// for more info, see the README\n\n\nvar ReactBubbleChart = function (_React$Component) {\n  _inherits(ReactBubbleChart, _React$Component);\n\n  function ReactBubbleChart(props) {\n    var _this = this;\n\n    _classCallCheck(this, ReactBubbleChart);\n\n    _get(Object.getPrototypeOf(ReactBubbleChart.prototype), 'constructor', this).call(this, props); // define the method this way so that we have a clear reference to it\n    // this is necessary so that window.removeEventListener will work properly\n\n\n    this.handleResize = function (e) {\n      return _this._handleResize(e);\n    };\n  }\n  /** Render town */\n\n\n  _createClass(ReactBubbleChart, [{\n    key: 'render',\n    value: function render() {\n      return _react2['default'].createElement('div', {\n        className: \"bubble-chart-container \" + this.props.className\n      });\n    }\n    /** When we mount, intialize resize handler and create the bubbleChart */\n\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.bubbleChart = new _ReactBubbleChartD32['default'](this.getDOMNode(), this.getChartState());\n    }\n    /** When we update, update our friend, the bubble chart */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.bubbleChart.update(this.getDOMNode(), this.getChartState());\n    }\n    /** Define what props get passed down to the d3 chart */\n\n  }, {\n    key: 'getChartState',\n    value: function getChartState() {\n      return {\n        data: this.props.data,\n        colorLegend: this.props.colorLegend,\n        fixedDomain: this.props.fixedDomain,\n        selectedColor: this.props.selectedColor,\n        selectedTextColor: this.props.selectedTextColor,\n        onClick: this.props.onClick || function () {},\n        smallDiameter: this.props.smallDiameter,\n        mediumDiameter: this.props.mediumDiameter,\n        legendSpacing: this.props.legendSpacing,\n        legend: this.props.legend,\n        tooltip: this.props.tooltip,\n        tooltipProps: this.props.tooltipProps,\n        tooltipFunc: this.props.tooltipFunc,\n        fontSizeFactor: this.props.fontSizeFactor,\n        duration: this.props.duration,\n        delay: this.props.delay\n      };\n    }\n    /** When we're piecing out, remove the handler and destroy the chart */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      this.bubbleChart.destroy(this.getDOMNode());\n    }\n    /** Helper method to reference this dom node */\n\n  }, {\n    key: 'getDOMNode',\n    value: function getDOMNode() {\n      return _reactDom2['default'].findDOMNode(this);\n    }\n    /** On a debounce, adjust the size of our graph area and then update the chart */\n\n  }, {\n    key: '_handleResize',\n    value: function _handleResize(e) {\n      var _this2 = this;\n\n      this.__resizeTimeout && clearTimeout(this.__resizeTimeout);\n      this.__resizeTimeout = setTimeout(function () {\n        _this2.bubbleChart.adjustSize(_this2.getDOMNode());\n\n        _this2.bubbleChart.update(_this2.getDOMNode(), _this2.getChartState());\n\n        delete _this2.__resizeTimeout;\n      }, 200);\n    }\n  }]);\n\n  return ReactBubbleChart;\n}(_react2['default'].Component);\n\nexports['default'] = ReactBubbleChart;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}